package com.kent.daemon

import java.sql._

import akka.actor.Actor
import com.kent.pub.Event._
import com.kent.pub.actor.Daemon

import scala.io.Source

class PersistManager(url: String, username: String, pwd: String) extends Daemon{
  implicit var connection: Connection = _
  //只需要第一次启动时初始化建表sql
  var isInitSqlNeeded = true 
  
  override def individualReceive: Actor.Receive = {
    //??? 后续改成future
    case Save(obj) => obj.save
    case Delete(obj) => sender ! obj.delete
    case Get(obj) => sender ! obj.getEntity
    case ExecuteSql(sql) => sender ! executeSql(sql)
    case Query(str) => sender ! queryList(str)
  }

  override def preStart(){
    try {
      //注册Driver
      Class.forName("com.mysql.jdbc.Driver")
      //得到连接
      connection = DriverManager.getConnection(url, username, pwd)
    } catch {
      case e: Exception =>
        log.error("连接数据库失败，请检查数据库配置")
        throw e
    }
    if(isInitSqlNeeded) initSql()
  }
  override def postRestart(reason: Throwable){
    super.postRestart(reason)
    this.isInitSqlNeeded = false
    log.info(s"${reason.getMessage},pm管理器即将重启...")
  }

  def initSql() = {
    var stat:Statement = null
    if(connection != null){
      try {
  	    //启动清理
        var content = ""
        Source.fromFile(this.getClass.getResource("/").getPath + "/create_table.sql").foreach { content += _ }
        val sqls = content.split(";").filter { _.trim() !="" }.toList
        connection.setAutoCommit(false)
      	stat = connection.createStatement()
        val results = sqls.map { stat.execute(_) }.toList
        connection.commit()
      } catch {
        case e: Exception =>
          e.printStackTrace()
          connection.rollback()
          log.error("执行初始化建表sql失败")
          throw e
      } finally{
        if(stat != null) stat.close()
        connection.setAutoCommit(true)
      }
      log.info("成功初始化数据库")
    }
  }
  /**
   * 查询结果数组
   */
  def queryList(sql: String): List[List[String]] = {
    val listOpt = querySql[List[List[String]]](sql, (rs: ResultSet) =>{
     var rowList = List[List[String]]()
     val colCnt = rs.getMetaData.getColumnCount
     while(rs.next()){
       val row = (1 to colCnt by 1).map { x => rs.getString(x) }.toList
       rowList = rowList :+ row
     }
     rowList
    })
    if(listOpt.isEmpty) null else listOpt.get
  }
  /**
   * 查询sql
   */
  private def querySql[A](sql: String, f: ResultSet => A)(implicit conn: Connection): Option[A] = {
    val stat = conn.createStatement()
    try{
    	val rs = stat.executeQuery(sql)
    	val obj = f(rs)
    	if(obj != null) return Some(obj)
    }catch{
      case e:Exception => e.printStackTrace()
    }finally{
      if(stat != null) stat.close()
    }
    None
  }
  /**
   * 执行sql
   */
  def executeSql(sql: String)(implicit conn: Connection): Boolean = {
    val stat = conn.createStatement()
    var result:Boolean = true
    try{
      stat.execute(sql) 
    }catch{
      case e:Exception => e.printStackTrace()
      result = false
    }finally{
      if(stat != null) stat.close()
      result
    }
    result
  }
  
  override def postStop(){
    if(connection != null)connection.close()
  }
}

object PersistManager {
  def apply(url: String, username: String, pwd: String):PersistManager = new PersistManager(url, username, pwd)
}